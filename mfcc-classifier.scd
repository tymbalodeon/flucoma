(
~get_neural_network = {
    var activation = FluidMLPRegressor.sigmoid;
    FluidMLPClassifier(
        s,
        hiddenLayers: [5],
        activation: activation,
        maxIter: 1000,
        learnRate: 0.1,
        momentum: 0.9,
        batchSize: 5,
        validation: 0
    );
};

~set_state = {
    ~counter = 0;
    ~timbre_data = FluidDataSet(s);
    ~number_of_coefficients = 13;
    ~mfcc_buffer = Buffer.alloc(s, ~number_of_coefficients);
    ~labels = FluidLabelSet(s);
    ~neural_network = ~get_neural_network.();
    ~split_frame = 1783040;
    ~window = Window("MFCC Classifier").front;
    ~trombone_file = "Olencki-TenTromboneLongTones-M.wav";
    ~oboe_file = "Harker-DS-TenOboeMultiphonics-M.wav";
};

~set_button = {
    arg bounds, states, action;
    Button(~window, bounds).states_(states).action_(action);
};

~set_add_points_button = {
    arg bounds;
    var states = [["Add point"]];
    var add_point = {
        var id = "Sample %".format(~counter);
        var label = ~instrument_name;
        ~timbre_data.addPoint(id, ~mfcc_buffer);
        ~labels.addLabel(id, label);
        ~counter = ~counter + 1;
        "Added % %.".format(label, id).postln;
    };
    ~set_button.(bounds, states, add_point);
};

~get_audio = {
    arg audio_buffer;
    PlayBuf.ar(
        numChannels: 1,
        bufnum: audio_buffer,
        rate: BufRateScale.ir(audio_buffer),
        doneAction: 2
    );
};

~get_mfcc = {
    arg audio;
    FluidMFCC.kr(
        audio,
        startCoeff: 1,
        maxNumCoeffs: ~number_of_coefficients
    );
};

~get_synth = {
    arg audio_buffer, make_predictions = false, predictions = nil;
    var audio = ~get_audio.(audio_buffer);
    var mfcc = ~get_mfcc.(audio);
    if (make_predictions == true) {
        var loudness = FluidLoudness.kr(audio)[0];
        var threshold = -40;
        var is_predicting = loudness >= threshold;
        var trigger = Impulse.kr(30);
        ~neural_network.kr(
            trigger * is_predicting,
            ~mfcc_buffer,
            predictions
        );
        SendReply.kr(
            trigger * is_predicting,
            "/prediction",
            FluidBufToKr.kr(predictions)
        );
        SendReply.kr(trigger * (1 - is_predicting), "/prediction", -1);
    };
    FluidKrToBuf.kr(mfcc, ~mfcc_buffer);
    audio.dup;
};

~display_waveform = {
    arg audio;
    FluidWaveform(audio);
};

~analyze_and_play = {
    arg audio_buffer, instrument_name;
    ~waveform = ~display_waveform.(audio_buffer);
    ~instrument_name = instrument_name;
    ~synth = {~get_synth.(audio_buffer)}.play;
};

~set_play_button = {
    arg bounds, audio_buffer, instrument_name;
    var states = [["Play % training".format(instrument_name)]];
    var play = {
        if (~synth == nil) {
            "Playing % training...".format(instrument_name).postln;
            ~analyze_and_play.(
                audio_buffer,
                instrument_name
            );
        };
    };
    ~set_button.(bounds, states, play);
};

~set_stop_playing_button = {
    arg bounds;
    var states = [["Stop"]];
    var stop_analyzing_and_playing = {
        if (~synth != nil) {
            ~synth.free;
            ~synth = nil;
            "Playing stopped.".postln;
        };
        if (~instrument_name != nil) {
            ~instrument_name = nil;
        };
        if (~waveform != nil) {
            ~waveform.close;
            ~waveform = nil;
        };
    };
    ~set_button.(bounds, states, ~stop_analyzing_and_playing);
};

~set_reset_button = {
    arg bounds;
    var states = [["Reset"]];
    var reset = {
        ~counter = 0;
        [~timbre_data, ~mfcc_buffer, ~labels].do {
            arg data;
            data.clear;
        };
        "Points reset.".postln;
    };
    ~set_button.(bounds, states, ~reset);
};

~set_show_all_points_button = {
    arg bounds;
    var action = {
        ~timbre_data.print;
    };
    ~set_button.(
        bounds,
        [["Show all points"]],
        action
    )
};

~set_train_button = {
    arg bounds;
    var states = [["Train"]];
    var train = {
        20.do {
            var post_loss = {
                arg loss;
                loss.postln;
            };
            ~neural_network.fit(~timbre_data, ~labels, post_loss);
        };
    };
    ~set_button.(bounds, states, train);
};

~set_prediction_action = {
    var post_message = {
        arg message;
        message[3].postln;
    };
    OSCdef(\predictions, post_message, "/prediction");
};

~play_prediction_synth = {
    arg predictions, audio_buffer, instrument_name;
    ~waveform = ~display_waveform.(audio_buffer);
    ~instrument_name = instrument_name;
    ~synth = {~get_synth.(
        audio_buffer,
        make_predictions: true,
        predictions: predictions
    )}.play;
};

~make_predictions = {
    arg audio_buffer, instrument_name;
    var predictions = Buffer.alloc(s, numFrames: 1);
    ~set_prediction_action.();
    ~play_prediction_synth.(
        predictions,
        audio_buffer,
        instrument_name
    );
};

~set_predictions_button = {
    arg bounds, audio_buffer, instrument_name;
    var states = [["Predict %".format(instrument_name)]];
    var play_and_stop_predictions = {
        if (~synth == nil) {
            "Playing predictions...".postln;
            ~make_predictions.(
                audio_buffer,
                instrument_name
            );
        };
    };
    ~set_button.(bounds, states, play_and_stop_predictions);
};

~reset_windows = {
    Window.closeAll;
    ServerMeter(s, 2, 2);
};

~load_audio_file = {
    arg filename, start_frame = 0, num_frames = -1;
    var path = FluidFilesPath(filename);
    Buffer.read(s, path, start_frame, num_frames);
};

~get_training_audio = {
    arg filename;
    ~load_audio_file.(filename, num_frames: ~split_frame);
};

~get_testing_audio = {
    arg filename;
    ~load_audio_file.(filename, start_frame: ~split_frame);
};

~set_window_buttons = {
    ~set_add_points_button.(Rect(230, 10, 200, 50));
    ~set_play_button.(
        Rect(10, 10, 200, 50),
        ~get_training_audio.(~trombone_file),
        \trombone
    );
    ~set_play_button.(
        Rect(10, 60, 200, 50),
        ~get_training_audio.(~oboe_file),
        \oboe
    );
    ~set_reset_button.(Rect(230, 60, 200, 50));
    ~set_train_button.(Rect(230, 160, 200, 50));
    ~set_stop_playing_button.(Rect(10, 230, 200, 50));
    ~set_predictions_button.(
        Rect(10, 110, 200, 50),
        ~get_testing_audio.(~trombone_file),
        "trombone"
    );
    ~set_predictions_button.(
        Rect(10, 160, 200, 50),
        ~get_testing_audio.(~oboe_file),
        "oboe"
    );
    ~set_show_all_points_button.(Rect(230, 230, 200, 50));
};

s.waitForBoot {
    ~reset_windows.();
    ~set_state.();
    ~set_window_buttons.(
        ~timbre_data,
        ~mfcc_buffer,
        ~labels,
        ~neural_network
    );
};
)

// ~predict_point = {
//     arg neural_network;
//     var post_label = {
//         arg label;
//         label.postln;
//     };
//     ~neural_network.predictPoint(~mfcc_buffer, post_label);
// };